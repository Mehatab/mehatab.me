{"version":3,"sources":["config.js","components/Header/index.js","components/Header/Header.js","components/About/About.js","components/Medium/Medium.js","components/Repository/Repository.js","App.js","serviceWorker.js","index.js"],"names":["config","name","title","blog","github","twitter","stackoverflow","medium","instagram","dev","youtube","linkedin","Header","darkMode","data","useAbortableFetch","className","onClick","toggle","value","src","avatar_url","alt","location","bio","href","rel","target","About","id","Medium","username","items","map","post","key","pubDate","link","Repository","repo","archived","fork","html_url","language","forks_count","stargazers_count","description","App","useDarkMode","document","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8859f829.chunk.js","sourcesContent":["const config = {\r\n\tname: 'Mehatab',\r\n\ttitle: \"Hi I'm Mehatab\",\r\n\tblog: '',//'Dev', // Dev.to or Medium (Make blank if you don't need the blog)\r\n\r\n\t// Social media profile username\r\n\tgithub: 'mehatab', // [REQUIRED] Github Username\r\n\ttwitter: 'ShaikhMehatab', // Twitter Username\r\n\tstackoverflow: '', // Eg: 3211944\r\n\tmedium: 'mehatab', // without @ symbol\r\n\tinstagram: 'mehatab.shaikh',\r\n\tdev: '',\r\n\tyoutube: '', // Channel ID\r\n\tlinkedin: ''\r\n};\r\n\r\nexport { config };\r\n","import Header from './Header';\r\nexport default Header;\r\n","import React from 'react';\r\nimport useAbortableFetch from 'use-abortable-fetch';\r\nconst Header = ({ darkMode, github, twitter, stackoverflow, medium, instagram, dev, youtube, linkedin }) => {\r\n\tconst { data } = useAbortableFetch(`https://api.github.com/users/${github}`);\r\n\tif (!data) return null;\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<div className=\"theme-switch\">\r\n\t\t\t\t<span onClick={darkMode.toggle}>\r\n\t\t\t\t\t{darkMode.value ? (\r\n\t\t\t\t\t\t<i className=\"animated hover-rotatefull em-svg em-sunny\" />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<i className=\"animated hover-rotatefull em-svg em-full_moon\" />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"profile\">\r\n\t\t\t\t<div className=\"flex\">\r\n\t\t\t\t\t<div className=\"avatar-center\">\r\n\t\t\t\t\t\t<img src={data.avatar_url} alt={data.name} className=\"avatar\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"profile-desc\">\r\n\t\t\t\t\t\t<h3>{data.name}</h3>\r\n\t\t\t\t\t\t<p className=\"text-muted\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-map-marker-alt\" /> {data.location}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p className=\"text-muted\"> {data.bio} </p>\r\n\t\t\t\t\t\t<p className=\"social-profile\">\r\n\t\t\t\t\t\t\t{twitter && (\r\n\t\t\t\t\t\t\t\t<a href={`https://twitter.com/${twitter}`} rel=\"noopener noreferrer\" target=\"_BLANK\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-twitter\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<a href={`https://github.com/${github}`} rel=\"noopener noreferrer\" target=\"_BLANK\">\r\n\t\t\t\t\t\t\t\t<i className=\"fab fa-github\" />\r\n\t\t\t\t\t\t\t</a>\r\n\r\n\t\t\t\t\t\t\t{stackoverflow && (\r\n\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={`https://stackoverflow.com/users/${stackoverflow}`}\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\ttarget=\"_BLANK\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-stack-overflow\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{medium && (\r\n\t\t\t\t\t\t\t\t<a href={`https://medium.com/@${medium}`} rel=\"noopener noreferrer\" target=\"_BLANK\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-medium\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{instagram && (\r\n\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={`https://instagram.com/${instagram}`}\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\ttarget=\"_BLANK\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-instagram\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{dev && (\r\n\t\t\t\t\t\t\t\t<a href={`https://dev.to/${dev}`} rel=\"noopener noreferrer\" target=\"_BLANK\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-dev\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{youtube && (\r\n\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={`https://youtube.com/channel/${youtube}`}\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\ttarget=\"_BLANK\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-youtube\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{linkedin && (\r\n\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={`https://linkedin.com/in/${linkedin}`}\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\ttarget=\"_BLANK\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<i className=\"fab fa-linkedin\" />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<a href=\"#about\">About</a>\r\n\t\t\t\t\t<a href=\"#blog\">Blog</a>\r\n\t\t\t\t\t<a href=\"#repository\">Repository</a>\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst About = ({ name }) => {\r\n\treturn (\r\n\t\t<section className=\"about\" id=\"about\">\r\n\t\t\t<h3>\r\n\t\t\t\tHi! I'm {name} <i className=\"animated hover-rotate em em-raised_hand_with_fingers_splayed\" />\r\n\t\t\t</h3>\r\n\t\t\t<div className=\"details\">\r\n\t\t\t\t<div className=\"item text-muted\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tI develop Android apps for a living. Fortunately, It’s also something I’m really passionate about. When not working with my overlords, I spend time exploring Android and enjoy working on side projects.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tSome of my previous works: &nbsp; &nbsp;\r\n\t\t\t\t\t\t<a rel=\"noopener noreferrer\" target=\"_BLANK\" href=\"https://play.google.com/store/apps/details?id=com.spendy\">\r\n\t\t\t\t\t\t\tSpendy,\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t&nbsp;&nbsp;\r\n\t\t\t\t\t\t<a rel=\"noopener noreferrer\" target=\"_BLANK\" href=\"https://play.google.com/store/apps/details?id=com.doday\">\r\n\t\t\t\t\t\t\tDoDay.\r\n\t\t\t\t\t\t</a>\t\t\t\t\t\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport { About };\r\n","import React from 'react';\r\nimport useAbortableFetch from 'use-abortable-fetch';\r\n\r\nconst Medium = ({ username }) => {\r\n\tconst { data } = useAbortableFetch(\r\n\t\t`https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@${username}`\r\n\t);\r\n\r\n\tif (!data) return null;\r\n\r\n\treturn (\r\n\t\t<section className=\"blog\" id=\"blog\">\r\n\t\t\t<h3>Blog</h3>\r\n\t\t\t<div className=\"posts\">\r\n\t\t\t\t{data.items &&\r\n\t\t\t\t\tdata.items.map(post => (\r\n\t\t\t\t\t\t<div className=\"post\" key={post.pubDate}>\r\n\t\t\t\t\t\t\t<h5>\r\n\t\t\t\t\t\t\t\t<a href={post.link} rel=\"noopener noreferrer\" target=\"_BLANK\">\r\n\t\t\t\t\t\t\t\t\t{post.title}\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</h5>\r\n\t\t\t\t\t\t\t<p className=\"date\">Published on {post.pubDate}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport { Medium };\r\n","import React from 'react';\r\nimport useAbortableFetch from 'use-abortable-fetch';\r\n\r\nconst Repository = () => {\r\n\tconst { data } = useAbortableFetch('https://api.github.com/users/mehatab/repos');\r\n\r\n\tif (!data) return null;\r\n\r\n\treturn (\r\n\t\t<section className=\"repository\" id=\"repository\">\r\n\t\t\t<h3> Repository</h3>\r\n\t\t\t<div className=\"repos\">\r\n\t\t\t\t{data.map(repo => {\r\n\t\t\t\t\tif (repo.archived === false && repo.fork === false)\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\tkey={repo.id}\r\n\t\t\t\t\t\t\t\thref={repo.html_url}\r\n\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\ttarget=\"_BLANK\"\r\n\t\t\t\t\t\t\t\tclassName=\"repo-card\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<h5>{repo.name}</h5>\r\n\t\t\t\t\t\t\t\t<p className=\"text-muted flex space-between repo-stats\">\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-code\" /> {repo.language}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-code-branch\" /> {repo.forks_count}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-star\" /> {repo.stargazers_count}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t\t\t\t<p className=\"desc text-muted\">{repo.description}</p>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport { Repository };\r\n","import React from 'react';\nimport useDarkMode from 'use-dark-mode';\n\nimport { config } from './config';\nimport Header from './components/Header';\nimport { About } from './components/About';\nimport { Medium } from './components/Medium';\nimport { Repository } from './components/Repository/';\n\nfunction App() {\n  const darkMode = useDarkMode(true);\n  document.title = config.title;\n  if (!config.github) return <p className=\"text-black\">Edit src/config.js</p>;\n  return (\n    <div className=\"App\">\n      <Header {...config} darkMode={darkMode} />\n      <About name={config.name} />\n      {config.blog === 'Medium' && <Medium username={config.medium} />}\n\t  <Repository />\t\t\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}